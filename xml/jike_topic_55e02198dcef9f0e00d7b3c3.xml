<?xml version="1.0" encoding="UTF-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>JitHub程序员 - 即刻圈子</title><link>https://m.okjike.com/topics/55e02198dcef9f0e00d7b3c3</link><atom:link href="http://rsshub.rssforever.com/jike/topic/55e02198dcef9f0e00d7b3c3" rel="self" type="application/rss+xml"></atom:link><description>开发者们分享，问答，也可以交友的地方。欢迎所有工程师！ - Powered by RSSHub</description><generator>RSSHub</generator><webMaster>contact@rsshub.app (RSSHub)</webMaster><language>en</language><image><url>https://cdnv2.ruguoapp.com/FkFcHSgyNRo4yKxLYMVbDDP6gwdk.png?imageMogr2/auto-orient/heic-exif/1/format/jpeg/thumbnail/1000x1000%3E</url><title>JitHub程序员 - 即刻圈子</title><link>https://m.okjike.com/topics/55e02198dcef9f0e00d7b3c3</link></image><lastBuildDate>Mon, 05 May 2025 16:13:23 GMT</lastBuildDate><ttl>5</ttl><item><title>「SEO新卷王」Pollo AI 创始人阿彪首谈：SEO 怎么做？红人怎么投？付费广告怎么搞？ - 十字路口Crossing</title><description>&lt;img src=&quot;https://cdnv2.ruguoapp.com/Fn-V-e4dOc8LxBhO5hdRRkXzPm2R?imageMogr2/auto-orient/heic-exif/1/format/jpeg?imageView2/0/w/800/h/800/format/jpeg/q/80&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;            &lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/6818b16047ebeede7ede50f7?s=eyJ1IjoiNWU3ZWVjOGQxYmZiYmMzZGFkODJiYzgyIiwiZCI6MX0%3D&quot;&gt;「SEO新卷王」Pollo AI 创始人阿彪首谈：SEO 怎么做？红人怎么投？付费广告怎么搞？ - 十字路口Crossing&lt;/a&gt;&lt;br&gt;        &lt;br&gt;@阿彪Bill 彪哥这期播客，很值得大家听。</description><link>https://m.okjike.com/originalPosts/6818be205cf861568921cdaa</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/6818be205cf861568921cdaa</guid><pubDate>Mon, 05 May 2025 13:33:20 GMT</pubDate><author>哥飞</author></item><item><title>之前寻找邮件发送服务的时候，综合对比了 Resend, Mailgun, Postmark 等多个服务，综合下来感觉 Resend 的性价比是最高的，就是 20 美元的起步价有点高。今天又...</title><description>之前寻找邮件发送服务的时候，综合对比了 Resend, Mailgun, Postmark 等多个服务，综合下来感觉 Resend 的性价比是最高的，就是 20 美元的起步价有点高。今天又发现了一个性价比更高的：Mailchannels，起步价只要 10 美元，包含 10000 封邮件额度。和 Resend 起步套餐同样的 50000 封额度只要 15 美元，要是早点知道我还能省点钱。不过我已经在看 Amazon SES 了，这个能省的更多，不过相比前边的使用起来略麻烦点。</description><link>https://m.okjike.com/originalPosts/6817f8ad5cf861568915e614</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/6817f8ad5cf861568915e614</guid><pubDate>Sun, 04 May 2025 23:30:53 GMT</pubDate><author>崇云君</author></item><item><title>每个人都有一堆的好想法，想改变世界 教你如何快速验证你的想法👇🏻 - 用 vibe-coding 搭一个简单的等待页（waitlist） - 接入 Google 表单，收集用户邮箱 -...</title><description>每个人都有一堆的好想法，想改变世界&lt;br&gt;教你如何快速验证你的想法👇🏻&lt;br&gt;&lt;br&gt;- 用 vibe-coding 搭一个简单的等待页（waitlist）&lt;br&gt;- 接入 Google 表单，收集用户邮箱&lt;br&gt;- 弄清楚谁才是你的目标用户&lt;br&gt;- 去他们活跃的地方，想办法宣传这个waitlist&lt;br&gt;- 收集100个邮箱&lt;br&gt;- 和其中10个人深入交流&lt;br&gt;- 尝试让2-3个人愿意为你的想法付费&lt;br&gt;&lt;br&gt;当你收到钱后，开始真正动手去构建&lt;br&gt;聆听用户反馈，搞清楚他们究竟在意什么，你才会打造出真正被用户需要的产品！</description><link>https://m.okjike.com/originalPosts/68179981dd1e80669098b3e5</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/68179981dd1e80669098b3e5</guid><pubDate>Sun, 04 May 2025 16:44:49 GMT</pubDate><author>Yangyi.</author></item><item><title>最被社会接受的自毁形式： 👉过度思考。 这就是为什么你无法做决定、完成任何事情，或是不刷手机就睡不着。 以下是来自纳瓦尔击碎你「过度用脑执念」6个残酷真...</title><description>最被社会接受的自毁形式：&lt;br&gt;&lt;br&gt;👉过度思考。&lt;br&gt;&lt;br&gt;这就是为什么你无法做决定、完成任何事情，或是不刷手机就睡不着。&lt;br&gt;以下是来自纳瓦尔击碎你「过度用脑执念」6个残酷真相：&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FqDrXSIqmBmG-fPoUgzjB35Jn_zvv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/Fnz8YfIF-NmTmg23XVtiiovWEsV4v3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FtBsN0bO0VtKZ-k25VomThftrWsBv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FqFZvi6JpeYtqplHkUvb30rU1Zaov3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FgYFx3t6TqMd0N97QFvGtkPFsH0Kv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/6817666b97f435a697d9f25f</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/6817666b97f435a697d9f25f</guid><pubDate>Sun, 04 May 2025 13:06:51 GMT</pubDate><author>出海去孵化器</author></item><item><title>Reddit太容易封号了，虽然建新号也容易，但是养一个号的沉默成本太高了。 分享一个网上看到的养号流程，其实本质上还是好好去参与到社区里，里面还是有不少好玩...</title><description>Reddit太容易封号了，虽然建新号也容易，但是养一个号的沉默成本太高了。&lt;br&gt;&lt;br&gt;分享一个网上看到的养号流程，其实本质上还是好好去参与到社区里，里面还是有不少好玩的有用的内容，不要单纯为了做广告。&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FhMDNBNnw7Qy9coMjPRw4SggoHdgv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/681730fd88175981326a880f</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/681730fd88175981326a880f</guid><pubDate>Sun, 04 May 2025 09:18:53 GMT</pubDate><author>张翼ZYi</author></item><item><title>视频里一闪而过的画面，被我截图了。 主播测试刚组装好的键盘，用的是 monkeytype.com ，这网站月访问量1268万，直接打开加自然搜索带来了超过98%的访问量。 202...</title><description>视频里一闪而过的画面，被我截图了。&lt;br&gt;主播测试刚组装好的键盘，用的是 monkeytype.com ，这网站月访问量1268万，直接打开加自然搜索带来了超过98%的访问量。&lt;br&gt;2023年10月我公众号文章就介绍过这个网站 https://mp.weixin.qq.com/s/SZ1rQLBuA8s2uVTGdHhMhA 。&lt;br&gt;之后12月，又介绍了一遍他的开源获取流量方式 https://mp.weixin.qq.com/s/0AnaEIo7g3YCRfNwFli37A 。&lt;br&gt;这个站，UI漂亮，交互好，还开源，很值得大家学习。&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/Fo1OjoNJ94uYu0kN4ExNodD4-aNwv3.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FnVy4o5eVYn5XvJJVUaxDsUsd65av3.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/Ftm5FtnTcif0cY40PqVMUEJufszZv3.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/Flw7qi2Fm5dGGY_K99kSpIjTy60iv3.jpg&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/68170afa88175981326836d7</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/68170afa88175981326836d7</guid><pubDate>Sun, 04 May 2025 06:36:42 GMT</pubDate><author>哥飞</author></item><item><title>花了两天爆改「Next.js中文文档」的代码，搭建了 Nexty 文档站。 文档地址：https://nexty.dev/zh/docs 早鸟优惠码「EarlyBird」还能使用，只要$68，永久更新，...</title><description>花了两天爆改「Next.js中文文档」的代码，搭建了 Nexty 文档站。&lt;br&gt;&lt;br&gt;文档地址：https://nexty.dev/zh/docs&lt;br&gt;早鸟优惠码「EarlyBird」还能使用，只要$68，永久更新，想要全栈SaaS模板的朋友冲。&lt;br&gt;&lt;br&gt;【下面说说文档站】&lt;br&gt;Nexty 的文档是独立部署，独立域名，不过我使用 next.config.js 的 rewrites 特性，把文档站挂在 https://nexty.dev/docs 路径下，这样可以提升主站的 SEO。&lt;br&gt;&lt;br&gt;现在的文档包括：&lt;br&gt;1、模板介绍&lt;br&gt;2、第三方平台（域名解析、Supabase、Resend、Upstash、CloudFlare R2、Stripe）注册、配置详细步骤&lt;br&gt;3、本地运行和部署步骤&lt;br&gt;&lt;br&gt;这些都是通用的知识，所以都放在公开文档发布，即使你没有购买模板，也可以来这里学习。&lt;br&gt;&lt;br&gt;购买模板前，你可以在这些页面全面了解模板：&lt;br&gt;- 落地页：https://nexty.dev/zh&lt;br&gt;- 路线图：https://nexty.dev/zh/roadmap&lt;br&gt;- 使用文档：https://nexty.dev/zh/docs&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/Fh0FG3xbg05p2DGX6zT7v_IZy9hyv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FmyAYQqFYEGncMoI3vH3C-vI01Nfv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/6816ed899f9979a85a4c921b</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/6816ed899f9979a85a4c921b</guid><pubDate>Sun, 04 May 2025 04:31:05 GMT</pubDate><author>BigYe程普</author></item><item><title>Cursor好用啊，根本离不开😀</title><description>Cursor好用啊，根本离不开😀&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FiybcCCmRKsSjqbviumfvwVOzOK-v3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/68159470dc6b6d4853e60a65</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/68159470dc6b6d4853e60a65</guid><pubDate>Sat, 03 May 2025 03:58:40 GMT</pubDate><author>程序员辉哥</author></item><item><title>最近这个卡片好像很火 就让cursor给我写了个网站 欢迎体验👉 https://card.hekmon.com/</title><description>最近这个卡片好像很火&lt;br&gt;就让cursor给我写了个网站&lt;br&gt;欢迎体验👉 https://card.hekmon.com/&lt;br&gt;&lt;img src=&quot;https://cdnv2.ruguoapp.com/FktLTjgR2V9Gjt328bbLFmNfFP-Jv3.png&quot; referrerpolicy=&quot;no-referrer&quot;&gt;</description><link>https://m.okjike.com/originalPosts/681381bc88fa4e452aa03715</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/681381bc88fa4e452aa03715</guid><pubDate>Thu, 01 May 2025 14:14:20 GMT</pubDate><author>不务正业小胡同学</author></item><item><title>关于 MCP 的几个理解误区： 1. 误区 1：MCP 协议需要大模型支持 MCP 全称模型上下文协议，是为了在用户与大模型对话过程中，补充上下文信息给大模型，让大模型更...</title><description>关于 MCP 的几个理解误区：&lt;br&gt;&lt;br&gt;1. 误区 1：MCP 协议需要大模型支持&lt;br&gt;&lt;br&gt;MCP 全称模型上下文协议，是为了在用户与大模型对话过程中，补充上下文信息给大模型，让大模型更准确的回答用户提问而设计的。&lt;br&gt;&lt;br&gt;在 MCP 出来之前，有多种方式可以实现上下文信息的补充，比如：&lt;br&gt;&lt;br&gt;- 记忆存储。把对话过程的历史消息存储下来，每次新提问，带上历史消息一起发送给大模型&lt;br&gt;- RAG。在让大模型回答问题之前，先从本地知识库或者互联网上检索信息，作为上下文补充给大模型&lt;br&gt;- Function Calling。传递一堆工具给大模型挑选，根据大模型的返回参数，调用工具，用工具返回的结果作为上下文补充给大模型&lt;br&gt;&lt;br&gt;理解了给大模型补充上下文的原理，就可以知道，MCP 的本质，是指导应用层，如何更好的补充上下文信息给大模型。&lt;br&gt;&lt;br&gt;模型收到回复提问请求时，MCP 工作已经完成了。&lt;br&gt;&lt;br&gt;结论：MCP 协议不需要大模型支持，哪怕你使用古老的 gpt-2 作为问答模型，依然可以使用 MCP 协议补充上下文信息。&lt;br&gt;&lt;br&gt;2. 误区 2：只有支持 Function Calling 的模型才支持 MCP 协议&lt;br&gt;&lt;br&gt;聊 MCP 协议，必须要理解 Function Calling 机制。&lt;br&gt;&lt;br&gt;- Function Calling 是一种交互范式。&lt;br&gt;&lt;br&gt;基本流程是应用层传递一堆工具给大模型，大模型意图识别，做一次 Pick Tool 操作，返回应该调用的工具名称和调用参数，再由应用层发起 Call Tool 操作，拿到结果重新给到大模型回答。&lt;br&gt;&lt;br&gt;Function Calling 这套机制下有三个角色：应用、资源方、大模型。&lt;br&gt;&lt;br&gt;两个核心步骤：Pick Tool 和 Call Tool。&lt;br&gt;&lt;br&gt;Pick Tool 需要大模型推理，Call Tool 需要应用与资源方交互。&lt;br&gt;&lt;br&gt;- MCP 协议是一套交互标准。可以理解为 MCP 是对 Function Calling 机制的包装与升级。&lt;br&gt;&lt;br&gt;MCP 协议定义了三个角色：主机、客户端、服务器。&lt;br&gt;&lt;br&gt;跟 Function Calling 机制相比，MCP 协议相当于是把 客户端-服务器 作为一个黑盒。&lt;br&gt;&lt;br&gt;整体视角看，MCP 协议有四个角色：主机应用、黑盒（客户端-服务器）、资源方、大模型&lt;br&gt;&lt;br&gt;主机把请求给到客户端，客户端请求服务器，服务器对接资源方，主机最终得到黑盒返回的结果，作为补充上下文给到大模型回答。&lt;br&gt;&lt;br&gt;Function Calling 是应用直接对接资源，MCP 是应用通过黑盒对接资源，对接更加标准化，资源接入成本更低。&lt;br&gt;&lt;br&gt;Function Calling 是应用直接定义一堆工具，MCP 是应用从 MCP 服务器获取定义好的工具，应用无需重复编码。&lt;br&gt;&lt;br&gt;涉及到工具调用的环节，MCP 与 Function Calling 的交互形式一致。都依赖大模型的 Pick Tool 能力。&lt;br&gt;&lt;br&gt;所谓的大模型支持 Function Calling，是指大模型在 Pick Tool 环节，有更好的理解和推理能力，最终能返回更加准确的 Tool 和参数。&lt;br&gt;&lt;br&gt;不支持 Function Calling 的模型，依然可以通过提示词工程实现 Pick Tool。只不过准确度不如支持 Function Calling 的模型。&lt;br&gt;&lt;br&gt;结论：不支持 Function Calling 的模型，依然可以使用 MCP 协议补充上下文信息。&lt;br&gt;&lt;br&gt;3. 误区 3：大模型原生支持 MCP 协议&lt;br&gt;&lt;br&gt;所谓的大模型原生支持 MCP 协议，正确的理解应该是大模型内化了 MCP 协议的定义，并且内置集成了大量基于 MCP 协议定义的工具。&lt;br&gt;&lt;br&gt;当接到用户提问时，应用即使不给大模型传递任何工具，大模型依然可以基于内化的工具列表进行推理，返回应该调用的工具名称和调用参数给应用。&lt;br&gt;&lt;br&gt;事实上，互联网上的资源是千差万别的，意味着对接资源的 MCP 服务器及其内部的工具是海量的，不可枚举的。&lt;br&gt;&lt;br&gt;另一个关键点是，某些资源是私有的，需要用户鉴权的，大模型训练时不可能内化用户的鉴权凭证。&lt;br&gt;&lt;br&gt;从这个角度来讲，大模型内化 MCP 协议下的海量工具，不现实也不可能。&lt;br&gt;&lt;br&gt;某些模型厂商，也许是为了蹭 MCP 的热度，某些自媒体，也许是对 MCP 协议理解不到位，宣称某大模型原生支持 MCP 协议。&lt;br&gt;&lt;br&gt;其实要表达的意思，也许只是，在随大模型一起发布的某个 agent 框架里面，加上了对 MCP 协议的支持。&lt;br&gt;&lt;br&gt;结论：大模型原生支持 MCP 协议，这种说法是不专业的。大模型现阶段不可能原生支持 MCP。&lt;br&gt;&lt;br&gt;本人认知有限，也许会有理解偏颇之处。欢迎补充交流。🙂</description><link>https://m.okjike.com/originalPosts/6811832d070109da492803d3</link><guid isPermaLink="false">https://m.okjike.com/originalPosts/6811832d070109da492803d3</guid><pubDate>Wed, 30 Apr 2025 01:55:57 GMT</pubDate><author>艾逗笔</author></item></channel></rss>